apply plugin: 'groovy'

ext {
    jobScriptDir = 'jobs'
    xmlOutputDir = "${buildDir}/jobXml"
    xmlJobNames = []
}

sourceSets {
    jobs {
        groovy {
            srcDirs jobScriptDir
        }
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://repo.jenkins-ci.org/releases/' }
}

dependencies {
    compile 'org.codehaus.groovy:groovy:2.1.3'
    compile 'org.jenkins-ci.plugins:job-dsl-core:1.39'
    testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
        exclude module: 'groovy-all'
    }

    // for the RestApiScriptRunner
    compile('ant:ant:1.7.0')
    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.2') {
        exclude(module: 'groovy')
    }
}

task rest(dependsOn: 'classes', type: JavaExec) {
    main = 'com.dslexample.rest.RestApiScriptRunner'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties System.getProperties()
}

task jobXmlResources(description: "Copy the resources directory into the working folder so test job creating job XML can find them.", type: Copy) {
    from 'resources'
    into "${xmlOutputDir}/resources"
}

file(jobScriptDir).eachFile { File targetScript ->
    def xmlJobName = "createLocalXml-${targetScript.name}"
    xmlJobNames << xmlJobName
    task "$xmlJobName"(description: "create local copies of the Jenkins XML job file from jobs/${targetScript.name}",
        type: JavaExec, dependsOn: ['classes', 'jobXmlResources']) {
        main = 'javaposse.jobdsl.Run'
        classpath sourceSets.main.runtimeClasspath
        workingDir xmlOutputDir
        args targetScript
        // GIT_URL is required for example1Jobs.groovy to be tested
        environment('GIT_URL', 'git@github.com:kevinhcross/job-dsl-gradle-example.git')
        environment('GIT_BRANCH', 'branch-a')
    }
}

task createLocalXmlAll(dependsOn: xmlJobNames,
    description: "Create local XML files for all scripts in $jobScriptDir")

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}
